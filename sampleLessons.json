[
  {
    "id": 1,
    "title": "Java 3x3 TTT",
    "subtitle": "Learn the basics of a Java CLI app",
    "language": "Java",
    "description": "Write a basic 3x3 Tic-Tac-Toe in Java. It is enough to support a human and a computer player. Make sure that the computer can not be beaten.",
    "outputs": [
      "A basic 3x3 TTT",
      "100% code coverage",
      "Human vs Computer",
      "If possible, unbeatable"
    ],
    "outcomes": [
      "Basic understanding of static typing",
      "Understand how a Java project is structured"
    ],
    "reading": [
      "_Growing Object-Oriented Software Guided by Tests_ by Nat Pryce and Steve Freeman"
    ]
  },
  {
    "id": 2,
    "title": "Java 4x4 performance",
    "subtitle": "Learn the basics of a Java CLI app",
    "language": "Java",
    "description": "Expand your previous TTT to support 4x4. Make sure to *keep performance in mind*. How fast does it need to be usable? Also, which changes were anticipated and which came through testing?",
    "outputs": [
      "A TTT that responds to all user input in less than 2sec.",
      "A blog post detailing what bottlenecks were found and how...",
      "...or a blogpost about which design changes were needed."
    ],
    "outcomes": [
      "An understanding for design",
      "How to use Java performance measurement tools and what to be on the lookout for."
    ]
  },
  {
    "id": 3,
    "title": "Java Echo Server",
    "subtitle": "What are Sockets and why do they matter?",
    "language": "Java",
    "description": "Write a program that simply _echoes anything_ that is sent to it, essentially a parrot. Separately write a small client app, that takes input and displays the output from the server.",
    "outputs": [
      "A server app that will echo any message sent over a socket",
      "A client app that will send its input to the server"
    ],
    "outcomes": [
      "Understand sockets and how to separate your app from them"
    ]
  },
  {
    "id": 4,
    "title": "Java Chat server",
    "subtitle": "Talking should be a fun exercise.",
    "language": "Java",
    "description": "Write a chat server",
    "outputs": [
      "A single app that can be started and connected to a second instance of itself",
      "Both apps should be able to receive and display text like a regular chat"
    ],
    "outcomes": [
      "Deeper understanding of Sockets for back and forth communication",
      "AUndstand how to abstract away from IO"
    ]
  },
  {
    "id": 5,
    "title": "Java koans",
    "subtitle": "Basic syntax of the language",
    "language": "Java",
    "description": "Learn and practice the fundamentals of Java's syntax and constructs",
    "outputs": [
      "All passing koans from https://github.com/matyb/java-koans",
      "A blog post highlighting a different between Java and a previously known language"
    ],
    "outcomes": [
      "Basic undstanding of the language's syntax and constructs (i.e classes, loops, interfaces etc)"
    ]
  },
  {
    "id": 6,
    "title": "Java Guilded Rose",
    "subtitle": "Practice Refactoring",
    "language": "Java",
    "description": "Carefully and methodically refactor the code found in the Guilded Rose kata by adding tests and simplifying the production code",
    "outputs": [
      "A repo with the refactored Guilded Rose",
      "A blog post highlighting which SOLID principles your solution adheres to",
      "A git history showing the refactoring-steps taken"
    ],
    "outcomes": [
      "Understanding the practicality of the SOLID principles",
      "An appreciation for refactoring techniques",
      "An appreciation for a workflow that allows you to alwasy 'stay green'"
    ]
  },
  {
    "id": 7,
    "title": "Java Video Store",
    "subtitle": "Practice Refactoring",
    "language": "Java",
    "description": "Similar to the Guilded Rose kata, practice refactoring in small steps to improve the production code of a video store program",
    "outputs": [
      "A repo with the refactored Video Store code",
      "A blog post highlighting which SOLID principles your solution adheres to",
      "A git history showing the refactoring-steps taken"
    ],
    "outcomes": [
      "Understanding the practicality of the SOLID principles",
      "An appreciation for refactoring techniques",
      "An appreciation for a workflow that allows you to alwasy 'stay green'"
    ]
  },
  {
    "id": 8,
    "title": "Ruby 3x3 TTT",
    "subtitle": "Learn the basics of a Ruby CLI app",
    "language": "Ruby",
    "description": "Write a basic 3x3 Tic-Tac-Toe in Ruby. It is enough to support a human and a computer player. Make sure that the computer can not be beaten.",
    "outputs": [
      "A basic 3x3 TTT",
      "100% code coverage",
      "Human vs Computer",
      "If possible, unbeatable"
    ],
    "outcomes": [
      "Basic understanding of dynamic languages",
      "Understand how a Ruby project is structured"
    ],
    "reading": [
      "_Growing Object-Oriented Software Guided by Tests_ by Nat Pryce and Steve Freeman"
    ]
  },
  {
    "id": 9,
    "title": "Ruby 4x4 performance",
    "subtitle": "Learn the basics of a Ruby CLI app",
    "language": "Ruby",
    "description": "Expand your previous TTT to support 4x4. Make sure to *keep performance in mind*. How fast does it need to be usable? Also, which changes were anticipated and which came through testing?",
    "outputs": [
      "A TTT that responds to all user input in less than 2sec.",
      "A blog post detailing what bottlenecks were found and how...",
      "...or a blogpost about which design changes were needed."
    ],
    "outcomes": [
      "An understanding for design",
      "How to use Ruby performance measurement tools and what to be on the lookout for."
    ]
  },
  {
    "id": 10,
    "title": "Ruby Echo Server",
    "subtitle": "What are Sockets and why do they matter?",
    "language": "Ruby",
    "description": "Write a program that simply _echoes anything_ that is sent to it, essentially a parrot. Separately write a small client app, that takes input and displays the output from the server.",
    "outputs": [
      "A server app that will echo any message sent over a socket",
      "A client app that will send its input to the server"
    ],
    "outcomes": [
      "Understand sockets and how to separate your app from them"
    ]
  },
  {
    "id": 11,
    "title": "Ruby Chat server",
    "subtitle": "Talking should be a fun exercise.",
    "language": "Ruby",
    "description": "Write a chat server",
    "outputs": [
      "A single app that can be started and connected to a second instance of itself",
      "Both apps should be able to receive and display text like a regular chat"
    ],
    "outcomes": [
      "Deeper understanding of Sockets for back and forth communication",
      "AUndstand how to abstract away from IO"
    ]
  },
  {
    "id": 12,
    "title": "Ruby koans",
    "subtitle": "Basic syntax of the language",
    "language": "Ruby",
    "description": "Learn and practice the fundamentals of Ruby's syntax and constructs",
    "outputs": [
      "All passing koans from https://github.com/matyb/java-koans",
      "A blog post highlighting a different between Ruby and a previously known language"
    ],
    "outcomes": [
      "Basic undstanding of the language's syntax and constructs (i.e classes, loops, interfaces etc)"
    ]
  },
  {
    "id": 13,
    "title": "Ruby Guilded Rose",
    "subtitle": "Practice Refactoring",
    "language": "Ruby",
    "description": "Carefully and methodically refactor the code found in the Guilded Rose kata by adding tests and simplifying the production code",
    "outputs": [
      "A repo with the refactored Guilded Rose",
      "A blog post highlighting which SOLID principles your solution adheres to",
      "A git history showing the refactoring-steps taken"
    ],
    "outcomes": [
      "Understanding the practicality of the SOLID principles",
      "An appreciation for refactoring techniques",
      "An appreciation for a workflow that allows you to alwasy 'stay green'"
    ]
  },
  {
    "id": 14,
    "title": "Ruby Video Store",
    "subtitle": "Practice Refactoring",
    "language": "Ruby",
    "description": "Similar to the Guilded Rose kata, practice refactoring in small steps to improve the production code of a video store program",
    "outputs": [
      "A repo with the refactored Video Store code",
      "A blog post highlighting which SOLID principles your solution adheres to",
      "A git history showing the refactoring-steps taken"
    ],
    "outcomes": [
      "Understanding the practicality of the SOLID principles",
      "An appreciation for refactoring techniques",
      "An appreciation for a workflow that allows you to alwasy 'stay green'"
    ]
  },
  {
    "id": 15,
    "title": "Clojure 3x3 TTT",
    "subtitle": "Learn the basics of a Clojure CLI app",
    "language": "Clojure",
    "description": "Write a basic 3x3 Tic-Tac-Toe in Clojure. It is enough to support a human and a computer player. Make sure that the computer can not be beaten.",
    "outputs": [
      "A basic 3x3 TTT",
      "100% code coverage",
      "Human vs Computer",
      "If possible, unbeatable"
    ],
    "outcomes": [
      "Basic understanding of functional dynamic languages",
      "Understand how a Clojure project is structured"
    ],
    "reading": [
      "_Growing Object-Oriented Software Guided by Tests_ by Nat Pryce and Steve Freeman"
    ]
  },
  {
    "id": 16,
    "title": "Clojure 4x4 performance",
    "subtitle": "Learn the basics of a Clojure CLI app",
    "language": "Clojure",
    "description": "Expand your previous TTT to support 4x4. Make sure to *keep performance in mind*. How fast does it need to be usable? Also, which changes were anticipated and which came through testing?",
    "outputs": [
      "A TTT that responds to all user input in less than 2sec.",
      "A blog post detailing what bottlenecks were found and how...",
      "...or a blogpost about which design changes were needed."
    ],
    "outcomes": [
      "An understanding for design",
      "How to use Clojure performance measurement tools and what to be on the lookout for."
    ]
  },
  {
    "id": 17,
    "title": "Clojure Echo Server",
    "subtitle": "What are Sockets and why do they matter?",
    "language": "Clojure",
    "description": "Write a program that simply _echoes anything_ that is sent to it, essentially a parrot. Separately write a small client app, that takes input and displays the output from the server.",
    "outputs": [
      "A server app that will echo any message sent over a socket",
      "A client app that will send its input to the server"
    ],
    "outcomes": [
      "Understand sockets and how to separate your app from them"
    ]
  },
  {
    "id": 18,
    "title": "Clojure Chat server",
    "subtitle": "Talking should be a fun exercise.",
    "language": "Clojure",
    "description": "Write a chat server",
    "outputs": [
      "A single app that can be started and connected to a second instance of itself",
      "Both apps should be able to receive and display text like a regular chat"
    ],
    "outcomes": [
      "Deeper understanding of Sockets for back and forth communication",
      "AUndstand how to abstract away from IO"
    ]
  },
  {
    "id": 19,
    "title": "Clojure koans",
    "subtitle": "Basic syntax of the language",
    "language": "Clojure",
    "description": "Learn and practice the fundamentals of Clojure's syntax and constructs",
    "outputs": [
      "All passing koans from https://github.com/matyb/java-koans",
      "A blog post highlighting a different between Clojure and a previously known language"
    ],
    "outcomes": [
      "Basic undstanding of the language's syntax and constructs (i.e classes, loops, interfaces etc)"
    ]
  },
  {
    "id": 20,
    "title": "Clojure Guilded Rose",
    "subtitle": "Practice Refactoring",
    "language": "Clojure",
    "description": "Carefully and methodically refactor the code found in the Guilded Rose kata by adding tests and simplifying the production code",
    "outputs": [
      "A repo with the refactored Guilded Rose",
      "A blog post highlighting which SOLID principles your solution adheres to",
      "A git history showing the refactoring-steps taken"
    ],
    "outcomes": [
      "Understanding the practicality of the SOLID principles",
      "An appreciation for refactoring techniques",
      "An appreciation for a workflow that allows you to alwasy 'stay green'"
    ]
  },
  {
    "id": 21,
    "title": "Clojure Video Store",
    "subtitle": "Practice Refactoring",
    "language": "Clojure",
    "description": "Similar to the Guilded Rose kata, practice refactoring in small steps to improve the production code of a video store program",
    "outputs": [
      "A repo with the refactored Video Store code",
      "A blog post highlighting which SOLID principles your solution adheres to",
      "A git history showing the refactoring-steps taken"
    ],
    "outcomes": [
      "Understanding the practicality of the SOLID principles",
      "An appreciation for refactoring techniques",
      "An appreciation for a workflow that allows you to alwasy 'stay green'"
    ]
  },
  {
    "id": 22,
    "title": "Javascript 3x3 TTT",
    "subtitle": "Learn the basics of a Javascript CLI app",
    "language": "Javascript",
    "description": "Write a basic 3x3 Tic-Tac-Toe in Javascript. It is enough to support a human and a computer player. Make sure that the computer can not be beaten.",
    "outputs": [
      "A basic 3x3 TTT",
      "100% code coverage",
      "Human vs Computer",
      "If possible, unbeatable"
    ],
    "outcomes": [
      "Understand how a Javascript project is structured"
    ],
    "reading": [
      "_Growing Object-Oriented Software Guided by Tests_ by Nat Pryce and Steve Freeman"
    ]
  },
  {
    "id": 23,
    "title": "Javascript 4x4 performance",
    "subtitle": "Learn the basics of a Javascript CLI app",
    "language": "Javascript",
    "description": "Expand your previous TTT to support 4x4. Make sure to *keep performance in mind*. How fast does it need to be usable? Also, which changes were anticipated and which came through testing?",
    "outputs": [
      "A TTT that responds to all user input in less than 2sec.",
      "A blog post detailing what bottlenecks were found and how...",
      "...or a blogpost about which design changes were needed."
    ],
    "outcomes": [
      "An understanding for design",
      "How to use Javascript performance measurement tools and what to be on the lookout for."
    ]
  },
  {
    "id": 24,
    "title": "Javascript Echo Server",
    "subtitle": "What are Sockets and why do they matter?",
    "language": "Javascript",
    "description": "Write a program that simply _echoes anything_ that is sent to it, essentially a parrot. Separately write a small client app, that takes input and displays the output from the server.",
    "outputs": [
      "A server app that will echo any message sent over a socket",
      "A client app that will send its input to the server"
    ],
    "outcomes": [
      "Understand sockets and how to separate your app from them"
    ]
  },
  {
    "id": 25,
    "title": "Javascript Chat server",
    "subtitle": "Talking should be a fun exercise.",
    "language": "Javascript",
    "description": "Write a chat server",
    "outputs": [
      "A single app that can be started and connected to a second instance of itself",
      "Both apps should be able to receive and display text like a regular chat"
    ],
    "outcomes": [
      "Deeper understanding of Sockets for back and forth communication",
      "AUndstand how to abstract away from IO"
    ]
  },
  {
    "id": 26,
    "title": "Javascript koans",
    "subtitle": "Basic syntax of the language",
    "language": "Javascript",
    "description": "Learn and practice the fundamentals of Javascript's syntax and constructs",
    "outputs": [
      "All passing koans from https://github.com/matyb/java-koans",
      "A blog post highlighting a different between Javascript and a previously known language"
    ],
    "outcomes": [
      "Basic undstanding of the language's syntax and constructs (i.e classes, loops, interfaces etc)"
    ]
  },
  {
    "id": 27,
    "title": "Javascript Guilded Rose",
    "subtitle": "Practice Refactoring",
    "language": "Javascript",
    "description": "Carefully and methodically refactor the code found in the Guilded Rose kata by adding tests and simplifying the production code",
    "outputs": [
      "A repo with the refactored Guilded Rose",
      "A blog post highlighting which SOLID principles your solution adheres to",
      "A git history showing the refactoring-steps taken"
    ],
    "outcomes": [
      "Understanding the practicality of the SOLID principles",
      "An appreciation for refactoring techniques",
      "An appreciation for a workflow that allows you to alwasy 'stay green'"
    ]
  },
  {
    "id": 28,
    "title": "Javascript Video Store",
    "subtitle": "Practice Refactoring",
    "language": "Javascript",
    "description": "Similar to the Guilded Rose kata, practice refactoring in small steps to improve the production code of a video store program",
    "outputs": [
      "A repo with the refactored Video Store code",
      "A blog post highlighting which SOLID principles your solution adheres to",
      "A git history showing the refactoring-steps taken"
    ],
    "outcomes": [
      "Understanding the practicality of the SOLID principles",
      "An appreciation for refactoring techniques",
      "An appreciation for a workflow that allows you to alwasy 'stay green'"
    ]
  },
  {
    "id": 29,
    "title": "Elixir 3x3 TTT",
    "subtitle": "Learn the basics of a Elixir CLI app",
    "language": "Elixir",
    "description": "Write a basic 3x3 Tic-Tac-Toe in Elixir. It is enough to support a human and a computer player. Make sure that the computer can not be beaten.",
    "outputs": [
      "A basic 3x3 TTT",
      "100% code coverage",
      "Human vs Computer",
      "If possible, unbeatable"
    ],
    "outcomes": [
      "Basic understanding of functional dynamic languages",
      "Understand how a Elixir project is structured"
    ],
    "reading": [
      "_Growing Object-Oriented Software Guided by Tests_ by Nat Pryce and Steve Freeman"
    ]
  },
  {
    "id": 30,
    "title": "Elixir 4x4 performance",
    "subtitle": "Learn the basics of a Elixir CLI app",
    "language": "Elixir",
    "description": "Expand your previous TTT to support 4x4. Make sure to *keep performance in mind*. How fast does it need to be usable? Also, which changes were anticipated and which came through testing?",
    "outputs": [
      "A TTT that responds to all user input in less than 2sec.",
      "A blog post detailing what bottlenecks were found and how...",
      "...or a blogpost about which design changes were needed."
    ],
    "outcomes": [
      "An understanding for design",
      "How to use Elixir performance measurement tools and what to be on the lookout for."
    ]
  },
  {
    "id": 31,
    "title": "Elixir Echo Server",
    "subtitle": "What are Sockets and why do they matter?",
    "language": "Elixir",
    "description": "Write a program that simply _echoes anything_ that is sent to it, essentially a parrot. Separately write a small client app, that takes input and displays the output from the server.",
    "outputs": [
      "A server app that will echo any message sent over a socket",
      "A client app that will send its input to the server"
    ],
    "outcomes": [
      "Understand sockets and how to separate your app from them"
    ]
  },
  {
    "id": 32,
    "title": "Elixir Chat server",
    "subtitle": "Talking should be a fun exercise.",
    "language": "Elixir",
    "description": "Write a chat server",
    "outputs": [
      "A single app that can be started and connected to a second instance of itself",
      "Both apps should be able to receive and display text like a regular chat"
    ],
    "outcomes": [
      "Deeper understanding of Sockets for back and forth communication",
      "AUndstand how to abstract away from IO"
    ]
  },
  {
    "id": 33,
    "title": "Elixir koans",
    "subtitle": "Basic syntax of the language",
    "language": "Elixir",
    "description": "Learn and practice the fundamentals of Elixir's syntax and constructs",
    "outputs": [
      "All passing koans from https://github.com/matyb/java-koans",
      "A blog post highlighting a different between Elixir and a previously known language"
    ],
    "outcomes": [
      "Basic undstanding of the language's syntax and constructs (i.e classes, loops, interfaces etc)"
    ]
  },
  {
    "id": 34,
    "title": "Elixir Guilded Rose",
    "subtitle": "Practice Refactoring",
    "language": "Elixir",
    "description": "Carefully and methodically refactor the code found in the Guilded Rose kata by adding tests and simplifying the production code",
    "outputs": [
      "A repo with the refactored Guilded Rose",
      "A blog post highlighting which SOLID principles your solution adheres to",
      "A git history showing the refactoring-steps taken"
    ],
    "outcomes": [
      "Understanding the practicality of the SOLID principles",
      "An appreciation for refactoring techniques",
      "An appreciation for a workflow that allows you to alwasy 'stay green'"
    ]
  },
  {
    "id": 35,
    "title": "Elixir Video Store",
    "subtitle": "Practice Refactoring",
    "language": "Elixir",
    "description": "Similar to the Guilded Rose kata, practice refactoring in small steps to improve the production code of a video store program",
    "outputs": [
      "A repo with the refactored Video Store code",
      "A blog post highlighting which SOLID principles your solution adheres to",
      "A git history showing the refactoring-steps taken"
    ],
    "outcomes": [
      "Understanding the practicality of the SOLID principles",
      "An appreciation for refactoring techniques",
      "An appreciation for a workflow that allows you to alwasy 'stay green'"
    ]
  },
  {
    "id": 36,
    "title": "Unbeatable Computer Player Lambda",
    "subtitle": "Get started with AWS",
    "language": "Any",
    "description": "Get the best move via an API call",
    "outputs": [
      "Build an AWS Lambda that takes the board state and returns the best move",
      "Get the best move via an API call"
    ],
    "outcomes": [
      "Demonstrate basic understanding of AWS Lambda and API Gateway"
    ]
  },
  {
    "id": 37,
    "title": "Pub/Sub Tic Tac Toe",
    "subtitle": "Improve your AWS skills",
    "language": "Any",
    "description": "Improve AWS knowledge by creating a spectator Tic Tac Toe",
    "outputs": [
      "Update Tic Tac Toe to have Player and Subscriber user types",
      "Player sends the board state after each move to AWS SQS",
      "Subscriber gets the latest message from the queue via AWS SNS"
    ],
    "outcomes": [
      "Demonstrate basic understanding of AWS SQS and SNS"
    ]
  },
  {
    "id": 38,
    "title": "Java Hangman",
    "subtitle": "Get exposure to Java",
    "language": "Java",
    "description": "Build your first Java app!",
    "outputs": [
      "Build a basic command line Hangman app",
      "Make it playable by the user",
      "Choose random words to play"
    ],
    "outcomes": [
      "Working Java app",
      "Use Maven or Gradle"
    ]
  },
  {
    "id": 38,
    "title": "Java Hangman",
    "subtitle": "Get exposure to Java",
    "language": "Java",
    "description": "Build your first Java app!",
    "outputs": [
      "Build a basic command line Hangman app",
      "Make it playable by the user",
      "Choose random words to play"
    ],
    "outcomes": [
      "Working Java app",
      "Use Maven or Gradle"
    ]
  },
  {
    "id": 39,
    "title": "Java Word Wrap",
    "subtitle": "Perform a kata in under 10 minutes",
    "language": "Java",
    "description": "Perform the word wrap kata in under 10 minutes",
    "outputs": [
      "Practice the word wrap kata",
      "Practice Vim skills",
      "Record with keystrokes"
    ],
    "outcomes": [
      "Better Vim skills",
      "Better Java skills"
    ]
  },
  {
    "id": 40,
    "title": "Java Contact Manager",
    "subtitle": "Duplicate your Smartphone's contact functionality",
    "language": "Java",
    "description": "Build an app to manage contact details",
    "outputs": [
      "Create, Read, Update, Delete records",
      "Persist between sessions",
      "Create a usable UI"
    ],
    "outcomes": [
      "Exposure to writing to files and/or databases",
      "Clean code"
    ]
  },
  {
    "id": 41,
    "title": "Build a Ruby Gem",
    "subtitle": "Extract Core Logic from Ruby Tic Tac Toe",
    "language": "Ruby",
    "description": "Build your very first Ruby gem, and use it in your CLI and Web games",
    "outputs": [
      "Extract core functionality",
      "Build and publish a gem",
      "Use your own gem in a playable app"
    ],
    "outcomes": [
      "Exposure to open source",
      "Exposure to Ruby gems"
    ]
  }
]
